// Class automatically generated by Dev-C++ New Class wizard

#include "arraylist.h" // class's header file
#include <iostream>
#include <string>
#include <sstream>


#ifndef NULL
#define NULL 0 //defino null
#endif


namespace KangaParty
{
// class constructor
ArrayList::ArrayList(int length)
{
	canguroList = new Canguro *[length];
	this->_length = 0;
	this->arrayLength = length;
}

// class destructor
ArrayList::~ArrayList()
{
	cout << "se destruye la ArrayList de canguros :("; // u.u que penita
}

ArrayList& ArrayList::operator= (const ArrayList & source)
{
            

}

void ArrayList::add(int index, Canguro * nuevoCang)
{
    if(index > _length)
    {
             cout << endl << "index out of range, no se agrego al canguro "<<nuevoCang->show("id") << endl;
             return;
    }
    
    //cout <<endl<<"@@@Agregando al canguro "<< nuevoCang->show("nombre") <<" a la lista@@@"<< endl;
    
    _length++;
    
    if(_length>arrayLength)
    {
     Canguro ** newCanguroListTemp = new Canguro * [(_length*2)];
     arrayLength = (_length*2);
     
     for(int i=0; i<index; i++)
     {
             newCanguroListTemp[i] = canguroList[i];
     }
     newCanguroListTemp[index] = nuevoCang;
     for(int i=index; i<_length; i++)
     {
            newCanguroListTemp[i+1] = canguroList[i];
     }
     for(int i = _length; i<arrayLength; i++) {newCanguroListTemp[i] = NULL;}
    
     canguroList = newCanguroListTemp;
      
    }
    
    else
    {
        for(int i = _length-1; i>index; i--)
        {
                canguroList[i]=canguroList[i-1];
        }
        canguroList[index] = nuevoCang;
    }
                

}

int ArrayList::size()
{
    return _length;
}

Canguro ArrayList::get(int index)
{
         return *canguroList[index];        
}

Canguro* ArrayList::getPointer(int index)
{
         return canguroList[index];
}

bool ArrayList::isEmpty()
{
     if(_length==0) return true; //puntero que no apunta a nada apunta a la dirección 0 (null)
     else return false;                               
}

void ArrayList::remove(int position)
{
     if(position>=0 and position <_length)
     {
     cout << "Se elimino al Canguro en la posicion " << position << " de la lista" << endl;
     (canguroList[position])->printInfo(true);
     delete canguroList[position];
     for (int i = position; i < _length-1; i++)
     {
         canguroList[i] = canguroList[i+1];
     }
     canguroList[_length-1] = NULL;
     _length--;
     
             
     }
     else
     {
         cout << "Error: Out of Range" << endl;
     }
}

void ArrayList::print()
{  cout << "******************************************************"<< endl;
     cout << "POSICION\tID\t\tNOMBRE\t\tALTURA DE SALTO"<<endl;
     for(int i=0; i<_length; i++)
     {
             if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
             else {cout << i << "\t\t"; canguroList[i]->printInfo(false);}
     }
}

void ArrayList::print(int index)
{     
             canguroList[index]->printInfo(true);
         
}

void ArrayList::printList()
{
     print();
 }
 
void ArrayList::consulta()
{
  
  int option = 0;
  cout << endl << "Desea consultar por Existencia(1) o por una Lista(2)? " << endl;
  cin>>option;
  
  if(option == 2) //========Consulta por Lista========
  {   
     cout << endl << "Elija un parametro de consulta\n  1: Nombre\n  2: Altura de salto\n  3: Ambos\n" << endl;
     cin >>option;
     
     if(option == 1)
     {
               string param = "";
               
               cout << endl << "Ingrese el nombre que busca"<< endl;
               cin >> param; 
               
               cout << "******************************************************"<< endl;
               cout << "POSICION\tID\t\tNOMBRE\t\tALTURA DE SALTO"<<endl;
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else if(canguroList[i]->show("nombre") == param) {cout << i << "\t\t"; canguroList[i]->printInfo(false);}
               }
               cout << endl;                        
     }
     else if (option == 2)
     {

               double param = 0;
               
               cout << endl << "Ingrese la altura de salto que busca"<< endl;
               cin >> param; 
               
               cout << "******************************************************"<< endl;
               cout << "POSICION\tID\t\tNOMBRE\t\tALTURA DE SALTO"<<endl;
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else
                {
                    
                    if(canguroList[i]->getJH() == param) {cout << i << "\t\t"; canguroList[i]->printInfo(false);}
                }
               }
               cout << endl;                        
     }
     else if (option == 3)
     {

               double param1 = 0;
               string param2 = "";
               
               cout << endl << "Ingrese la altura de salto que busca"<< endl;
               cin >> param1;
               cout << endl << "Ingrese el nombre que busca"<< endl;
               cin >> param2; 
               
               cout << "******************************************************"<< endl;
               cout << "POSICION\tID\t\tNOMBRE\t\tALTURA DE SALTO"<<endl;
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else
                {

                    
                    if(canguroList[i]->getJH() == param1 && canguroList[i]->show("nombre") == param2) {cout << i << "\t\t"; canguroList[i]->printInfo(false);}
                }
               }
               cout << endl;                        
     }
     else cout << "Opcion invalida, volviendo al menu" << endl << endl;
   }
   
  else if(option == 1) //========Consulta por Existencia========
  {   
     cout << endl << "Elija un parametro de consulta\n  1: Nombre\n  2: Altura de salto\n  3: Ambos\n" << endl;
     cin>> option;
     if(option == 1)
     {
               string param = "";
               
               cout << endl << "Ingrese el nombre que busca"<< endl;
               cin >> param; 
               
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else if(canguroList[i]->show("nombre") == param) {cout << "Existe" << endl; return;}
               }
               cout << "No Existe";
               cout << endl;                        
     }
     else if (option == 2)
     {

               double param = 0;
               
               cout << endl << "Ingrese la altura de salto que busca"<< endl;
               cin >> param; 
               
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else
                {
                    
                    if(canguroList[i]->getJH() == param) {cout << "Existe" << endl; return;}
                }
               }
               cout << "No Existe" << endl;                        
     }
     else if (option == 3)
     {

               double param1 = 0;
               string param2 = "";
               
               cout << endl << "Ingrese la altura de salto que busca"<< endl;
               cin >> param1;
               cout << endl << "Ingrese el nombre que busca"<< endl;
               cin >> param2; 
               
               for(int i=0; i<_length; i++)
               {
                if(canguroList[i]==NULL){cout << "Error: NULL reference" <<endl;}
                else
                {

                    
                    if(canguroList[i]->getJH() == param1 && canguroList[i]->show("nombre") == param2) {cout << "Existe" << endl; return;}
                }
               }
               cout << "No Existe" << endl;                        
     }
     else cout << "Opcion invalida, volviendo al menu" << endl << endl;
     return;
  }
  else cout << "Opcion invalida, volviendo al menu" << endl << endl;                
}

}
