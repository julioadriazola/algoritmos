// Class automatically generated by Dev-C++ New Class wizard
#include "binnode.h"
#ifndef RBT_H
#define RBT_H

class RBT
{
    private:
            
        BinNode* root;
        BinNode* createNil(BinNode* parent, bool isLeftSon);
        BinNode* searchCorrespondingNilForInsert(BinNode* searchStart, string Key, string Value);
        void rotateRight(BinNode* head);
        void rotateLeft(BinNode* head);
        
        string PrettyPrint(BinNode* node, string Constant);
		string PrettyHelp(BinNode* From, BinNode* To, string Constant);
		int RefreshPrettyOrder(BinNode* node, int Value);
        
        //Idea sobre la estructura de la insercion/eliminacion en RBTs obtenida de http://en.wikipedia.org/wiki/Red%E2%80%93black_tree      
        BinNode* getGP(BinNode* N);
        BinNode* getUncle(BinNode* N);
        void InsertC1(BinNode* N);
        void InsertC2(BinNode* N);
        void InsertC3(BinNode* N);
        void InsertC4(BinNode* N);
        void InsertC5(BinNode* N);
           
        BinNode* searchCorrespondingKeyForDelete(BinNode* searchStart, string Key);
        bool tieneALoMasUnHijo(BinNode* N);
        BinNode* getBro(BinNode* N);
        void deleteNodoDeMaxUnHijo(BinNode* N);
        void DeleteC1(BinNode* N);
        void DeleteC2(BinNode* N);
        void DeleteC3(BinNode* N);
        void DeleteC4(BinNode* N);
        void DeleteC5(BinNode* N);
        void DeleteC6(BinNode* N); 
            
	public:
		
		RBT();
		~RBT();
		
		void Insert(string Key, string Value);
		void Delete(string Key);
		
		string PrettyPrint();
};

#endif // RBT_H
